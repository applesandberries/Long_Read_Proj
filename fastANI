import Bio
import os
import argparse
import subprocess
from Bio import SeqIO

def gfa_to_fasta(gfa_file, fasta_file):
    with open(gfa_file, 'r') as gfa, open(fasta_file, 'w') as fasta:
        for line in gfa:
            if line.startswith('S'):
                fields = line.strip().split('\t')
                sequence_id = fields[1]
                sequence = fields[2]
                fasta.write(f'>{sequence_id}\n{sequence}\n')

def convert_gfa_files(gfa_folder, fasta_folder):
    # Ensure output directory exists
    os.makedirs(fasta_folder, exist_ok=True)

    # List all files in the input folder
    gfa_files = [f for f in os.listdir(gfa_folder) if f.endswith(".gfa")]

    for gfa_file in gfa_files:
        # Generate output file name
        fasta_file = os.path.splitext(gfa_file)[0] + ".fasta"
        fasta_path = os.path.join(fasta_folder, fasta_file)

        # Convert GFA to FASTA
        try:
            gfa_to_fasta(os.path.join(gfa_folder, gfa_file), fasta_path)
        except Exception as e:
            print(f"Error converting {gfa_file} to FASTA: {e}")
            continue

        print(f"Converted {gfa_file} to {fasta_file}")

def run_fastani(query_folder, reference_folder, output_dir):
    query_files = [os.path.join(query_folder, f) for f in os.listdir(query_folder) if f.endswith('.fasta')]
    reference_files = [os.path.join(reference_folder, f) for f in os.listdir(reference_folder) if f.endswith('.fasta')]

    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)
    
    for query_file in query_files:
        query_name = os.path.splitext(os.path.basename(query_file))[0]
        for reference_file in reference_files:
            reference_name = os.path.splitext(os.path.basename(reference_file))[0]
            output_file = os.path.join(output_dir, f"{query_name}_vs_{reference_name}_fastani_output.txt")

            # Define FastANI command
            fastani_cmd = f"fastANI -q {query_file} -r {reference_file} -o {output_file}"

            # Run FastANI using subprocess
            try:
                subprocess.run(fastani_cmd, shell=True, check=True)
            except subprocess.CalledProcessError as e:
                print(f"Error running FastANI for {query_file} and {reference_file}: {e}")
                continue

            print(f"FastANI completed successfully for {query_file} and {reference_file}!")


def concatenate_fastani_results(output_dir):
    # Define the command to concatenate FastANI output files
    concat_command = f"cat {output_dir}/*.txt > {output_dir}/combined_fastani_results.txt"

    # Run the command using subprocess
    try:
        subprocess.run(concat_command, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error concatenating FastANI results: {e}")
        return

    print("FastANI results concatenated successfully!")


if __name__ == "__main__":
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="Convert GFA files to FASTA files and run FastANI on them")
    parser.add_argument("reference_gfa_folder", type=str, help="Folder containing GFA files for reference sequences")
    parser.add_argument("query_gfa_folder", type=str, help="Folder containing GFA files for query sequences")
    parser.add_argument("output_dir", type=str, help="Output directory for FastANI results")
    args = parser.parse_args()

    # Convert GFA files to FASTA
    reference_fasta_folder = os.path.join(args.output_dir, "reference_fasta")
    query_fasta_folder = os.path.join(args.output_dir, "query_fasta")
    convert_gfa_files(args.reference_gfa_folder, reference_fasta_folder)
    convert_gfa_files(args.query_gfa_folder, query_fasta_folder)

    # Run FastANI
    run_fastani(query_fasta_folder, reference_fasta_folder, args.output_dir)

    # Concatenate FastANI results
    concatenate_fastani_results(args.output_dir)
                                                                                                      95,28         Bot
