# assemble subset and compare - work in progress

# need to install Canu - easiest to install binary release, package installer not encouraged
# use conda or homebrew if necessary

# need to install fastANI
# must install the FastANI binaries yourself for this package to work
# pip install fastani

# subset assembly with Canu
# need to get rid of the -nanopore-raw option since Canu is designed for nanopore data not raw
# keep default genpme size
import argparse
import subprocess
import matplotlib.pyplot as plt

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Run Canu for nanopore data assembly.')
    parser.add_argument('-p', '--prefix', type=str, required=True, help='Prefix for output files')
    parser.add_argument('-d', '--output-dir', type=str, required=True, help='Output directory')
    parser.add_argument('--genome-size', type=str, default='5m', help='Estimated genome size')
    parser.add_argument('--input-fastq', type=str, required=True, help='Input FASTQ file')

    args = parser.parse_args()

    canu_cmd = [
        'canu',
        '-p', args.prefix,
        '-d', args.output_dir,
        f'genomeSize={args.genome_size}',
        '-nanopore-raw', args.input_fastq  #remove raw nano
    ]
    subprocess.run(canu_cmd)

    # Assuming the output contigs file is contigs.fasta
    subset_contigs = f'{args.output_dir}/{args.prefix}.contigs.fasta'
    full_contigs = '/path/to/full/assembly/contigs.fasta'

    fastani_cmd = f'fastANI --ql {subset_contigs} --rl {full_contigs} --fragLen 1000 --minFrag 1000 -o fastani_output.txt'
    subprocess.run(fastani_cmd, shell=True)

    # ANI visualization (assuming fastANI output is in fastani_output.txt)
    ani_values = []
    with open('fastani_output.txt', 'r') as f:
        for line in f:
            if line.startswith('ANI'):
                ani_values.append(float(line.split('\t')[2]))


# assembly comparison with fastANI - does not require an alignment step
# will calculate the ANI between the contigs in contigs.fasta from the subset assembly
# and the contigs from miniasm.gfa of the full assembly
# need to adjust the --fragLen and  --minFrag parameters
# repeat runs of fastANI with different parameters to assess robustness
'''with argparse.ArgumentParser(description='Calculate Average Nucleotide Identity (ANI) using fastANI') as parser:
    parser.add_argument('--ql', type=str, help='Path to query contigs FASTA file', required=True)
    parser.add_argument('--rl', type=str, help='Path to reference contigs FASTA file', required=True)
    parser.add_argument('--fragLen', type=int, help='Fragment length', default=1000)
    parser.add_argument('--minFrag', type=int, help='Minimum fragment length', default=1000)
    parser.add_argument('-o', '--output', type=str, help='Path to output file', default='output.txt')
    args = parser.parse_args()

    # Command for running fastANI
    cmd = f'fastANI --ql {args.ql} --rl {args.rl} --fragLen {args.fragLen} --minFrag {args.minFrag} -o {args.output}'

    # Run the command using subprocess
    subprocess.run(cmd, shell=True)'''


# ANI visualization via histogram and scatter plot for validation
# ANI values (use our actual data)
ani_values = []

# Scatter plot
# dashed red line is the perfect match 100% ANI
plt.figure(figsize=(8, 6))
plt.scatter(range(len(ani_values)), ani_values)
plt.axhline(y=100, color='r', linestyle='--', label='Perfect Match (100%)')
plt.xlabel('Genome Pairs')
plt.ylabel('ANI (%)')
plt.title('ANI Values for Genome Comparison')
plt.legend()
plt.show()

# Histogram
plt.figure(figsize=(8, 6))
plt.hist(ani_values, bins=10, color='skyblue', edgecolor='black')
plt.axvline(x=100, color='r', linestyle='--', label='Perfect Match (100%)')
plt.xlabel('ANI (%)')
plt.ylabel('Frequency')
plt.title('Distribution of ANI Values')
plt.legend()
plt.show()


