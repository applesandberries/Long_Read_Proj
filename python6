import argparse
import os
#part of the argparse code. obviously requires argpviarse
import sys
#requires sys
#function to parse command line arguments
import glob
def check_arg(args=None):
    parser = argparse.ArgumentParser(description='Reading in a Fasta File and Translating')
    parser.add_argument('-i', '--input', help='path to input files', required='True')
    parser.add_argument('-o', '--output', help='output file names', required='True')
    return parser.parse_args(args)
args = check_arg(sys.argv[1:])
infile = args.input
outfile = args.output
x=glob.glob(infile+"*"+".fastq")
print(x)
list_of_fastq_prefixes=set()
for i in x:
    p=i[len(infile):i.find('.fastq')]
    list_of_fastq_prefixes.add(p)
print(list_of_fastq_prefixes)
command='mkdir sub'
os.system(command)

for i in list_of_fastq_prefixes:
    command= 'minimap2 -x ava-ont '+infile+i+'.fastq '+infile+i+'.fastq | gzip -1 > '+infile+i+'_minimap.paf.gz'
    os.system(command)
    print(command)
for i in list_of_fastq_prefixes:
    command= 'miniasm -f '+infile+i+'.fastq '+infile+i+'_minimap.paf.gz > '+infile+i+'_miniasm.gfa'
    print(command)
    os.system(command)
basic_path = os.getcwd()
for i in list_of_fastq_prefixes:
    command='mkdir '+ basic_path + '/sub/'+i
    print(command)
    os.system(command)
import subprocess
import random
import os
for i in list_of_fastq_prefixes:
    file1= infile+i+'.fastq'
    result = subprocess.run(['wc', '-l', file1], capture_output=True, text=True)
    print(result)
    line_count = int(result.stdout.split()[0])
    number_reads = line_count // 4
    random.seed(1)
    randomList=random.sample(range(0,number_reads),10)

    counter=1
    for s in randomList:
        command='seqtk sample -s'+str(s)+' '+file1+' 20000 > '+ basic_path+'/sub/'+str(i)+'/'+str(counter)+''
        print(command)
        os.system(command)
        command= 'minimap2 -x ava-ont '+basic_path+'/sub/'+str(i)+'/'+str(counter)+' '+basic_path+'/sub/'+str(i)+'/'+str(counter)+' | gzip -1 > '+basic_path+'/sub/'+str(i)+'/'+str(counter)+'_minimap.paf.gz'
        print(command)
        os.system(command)
        command= 'miniasm -f '+basic_path+'/sub/'+str(i)+'/'+str(counter)+' '+basic_path+'/sub/'+str(i)+'/'+str(counter)+'_minimap.paf.gz > '+basic_path+'/sub/'+str(i)+'/'+str(counter)+'_miniasm.gfa'
        print(command)
        os.system(command)
        counter+=1
    os.chdir(os.path.join(basic_path, 'sub', i))
    command='mkdir gfa'
    os.system(command)
    command='mv *.gfa gfa'
    os.system(command)



os.chdir(os.path.join(basic_path))


for i in list_of_fastq_prefixes:
    out_dir = os.path.join(args.output, i)  # Create a separate directory for each prefix
    os.makedirs(out_dir, exist_ok=True)  # Ensure the directory exists

    def gfa_to_fasta(gfa_file, fasta_file):
        with open(gfa_file, 'r') as gfa, open(fasta_file, 'w') as fasta:
            for line in gfa:
                if line.startswith('S'):
                    fields = line.strip().split('\t')
                    sequence_id = fields[1]
                    sequence = fields[2]
                    fasta.write(f'>{sequence_id}\n{sequence}\n')

    def convert_gfa_files(gfa_folder, fasta_folder):
        os.makedirs(fasta_folder, exist_ok=True)
        gfa_files = [f for f in os.listdir(gfa_folder) if f.endswith(".gfa")]

        for gfa_file in gfa_files:
            fasta_file = os.path.splitext(gfa_file)[0] + ".fasta"
            fasta_path = os.path.join(fasta_folder, fasta_file)

            try:
                gfa_to_fasta(os.path.join(gfa_folder, gfa_file), fasta_path)
            except Exception as e:
                print(f"Error converting {gfa_file} to FASTA: {e}")
                continue

            print(f"Converted {gfa_file} to {fasta_file}")
    def run_fastani(query_folder, reference_folder, output_dir):
        query_files = [os.path.join(query_folder, f) for f in os.listdir(query_folder) if f.endswith('.fasta')]
        reference_files = [os.path.join(reference_folder, f) for f in os.listdir(reference_folder) if f.endswith('.fasta')]
        os.makedirs(output_dir, exist_ok=True)
        for query_file in query_files:

            query_name = os.path.splitext(os.path.basename(query_file))[0]
            for reference_file in reference_files:
                reference_name = os.path.splitext(os.path.basename(reference_file))[0]
                output_file = os.path.join(output_dir, f"{query_name}_vs_{reference_name}_fastani_output.txt")

                fastani_cmd = f"fastANI -q {query_file} -r {reference_file} -o {output_file}"
                try:
                    subprocess.run(fastani_cmd, shell=True, check=True)
                except subprocess.CalledProcessError as e:
                    print(f"Error running FastANI for {query_file} and {reference_file}: {e}")
                    continue

                print(f"FastANI completed successfully for {query_file} and {reference_file}!")

    def concatenate_fastani_results(output_dir):
        concat_command = f"cat {output_dir}/*.txt > {output_dir}/combined_fastani_results.txt"
        try:
            subprocess.run(concat_command, shell=True, check=True)
        except subprocess.CalledProcessError as e:
            print(f"Error concatenating FastANI results: {e}")
            return

        print("FastANI results concatenated successfully!")

    reference_fasta_folder = os.path.join(outfile,'reference_fasta')
    query_fasta_folder = os.path.join(outfile,'query_fasta')
    convert_gfa_files(basic_path + '/sub/' + i + '/gfa', reference_fasta_folder)
    convert_gfa_files(basic_path + '/sub/' + i + '/gfa', query_fasta_folder)
    run_fastani(query_fasta_folder, reference_fasta_folder, out_dir)
    concatenate_fastani_results(out_dir)
list_of_fastq_prefixes = list(list_of_fastq_prefixes)
for i in range(len(list_of_fastq_prefixes) - 1):  # Iterate over the list up to the second-to-last element
    current_element = list_of_fastq_prefixes[i]
    next_element = list_of_fastq_prefixes[i + 1]
    command = f'python {basic_path}/fastANI {basic_path}/sub/{current_element}/gfa {basic_path}/sub/{next_element}/gfa {basic_path}/output/different'

    print(command)
    os.system(command)
os.chdir(os.path.join(basic_path))
for i in range(len(list_of_fastq_prefixes) - 1):  # Iterate over the list up to the second-to-last element
    current_element = list_of_fastq_prefixes[i]
    next_element = list_of_fastq_prefixes[i + 1]
    command=f'python {basic_path}/Python_for_Rcode.py {basic_path}/output/{current_element}/combined_fastani_results.txt {basic_path}/output/{next_element}/combined_fastani_results.txt {basic_path}/output/different/combined_fastani_results.txt'
    print(command)
    os.system(command)
